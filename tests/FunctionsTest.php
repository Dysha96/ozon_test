<?php

namespace Tests;
require __DIR__ . '/../19md.php';

use PHPUnit\Framework\TestCase;
use function App\binarySearch;
use function App\fullSearch;
use function App\isInclude;

class FunctionsTest extends TestCase
{
    /**
     * @dataProvider collectDataForSearchTest
     */
    public function testSearch($array, $value, $result): void
    {
        $this->assertEquals($result, binarySearch($array, $value));
        $this->assertEquals($result, fullSearch($array, $value));
    }

    /**
     * @dataProvider collectDataForIsIncludeTest
     */
    public function testIsInclude($array, $subArray, $result): void
    {
        $this->assertEquals($result, isInclude($array, $subArray));
    }

    public function collectDataForIsIncludeTest(): array
    {
        return [
            [[1, 2, 3, 5, 7, 9, 11], [], true],
            [[1, 2, 3, 5, 7, 9, 11], [3, 5, 7], true],
            [[1, 2, 3, 5, 7, 9, 11], [4, 5, 7], false],
            [[1, 2], [1, 2, 3], false],
            [[1], [1, 2, 3], false],
            [[1, 2, 2, 2, 3], [2, 3], true],
            [[1, 2, 2, 2, 3], [2, 3, 3], false],
            [[1, 2, 2, 2, 3], [1, 2], true],

            [[11, 9, 7, 5, 3, 2, 1], [], true],
            [[11, 9, 7, 5, 3, 2, 1], [7, 5, 3], true],
            [[11, 9, 7, 5, 3, 2, 1], [7, 5, 4], false],
            [[3, 2], [3, 2, 1], false],
            [[3], [3, 2, 1], false],
            [[3, 2, 2, 2, 1], [2, 1], true],
            [[3, 2, 2, 2, 1], [2, 1, 1], false],
            [[3, 2, 2, 2, 1], [3, 2], true],
        ];
    }

    public function collectDataForSearchTest(): array
    {
        return [
            //Если искомый элемент отсутствует
            [[], 0, false],
            [[1], 0, false],
            [[1, 2], 0, false],
            [[1, 2, 3], 0, false],
            [[1, 2, 3, 4], 0, false],
            [[1, 2, 3, 4, 5], 0, false],
            [[1, 2, 3, 4, 5, 6], 0, false],
            //По возрастанию
            [[0], 0, 0],
            [[0, 1], 1, 1],
            [[0, 1, 2], 2, 2],
            [[0, 1, 2, 3], 3, 3],
            [[0, 1, 2, 3, 4], 4, 4],
            [[0, 1, 2, 3, 4, 5], 5, 5],
            [[0, 1, 2, 3, 4, 5, 6], 6, 6],
            [[1, 1, 1, 1, 1, 1, 1], 1, 0],
            [[0, 1, 1, 1, 1, 1, 1], 1, 1],
            [[0, 0, 1, 1, 1, 1, 1], 1, 2],
            [[0, 0, 0, 1, 1, 1, 1], 1, 3],
            [[0, 0, 0, 0, 1, 1, 1], 1, 4],
            [[0, 0, 0, 0, 0, 1, 1], 1, 5],
            [[0, 0, 0, 0, 0, 0, 1], 1, 6],
            [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,], 0, 0],
            [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,], 1, 1],
            [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,], 2, 24],
            // По убыванию
            [[1, 0], 0, 1],
            [[2, 1, 0], 0, 2],
            [[3, 2, 1, 0], 0, 3],
            [[4, 3, 2, 1, 0], 0, 4],
            [[5, 4, 3, 2, 1, 0], 0, 5],
            [[6, 5, 4, 3, 2, 1, 0], 0, 6],
            [[6, 5, 4, 3, 2, 0, 0], 0, 5],
            [[6, 5, 4, 3, 0, 0, 0], 0, 4],
            [[6, 5, 4, 0, 0, 0, 0], 0, 3],
            [[6, 5, 0, 0, 0, 0, 0], 0, 2],
            [[6, 0, 0, 0, 0, 0, 0], 0, 1],
            [[5, 4, 3, 2, 0, 0], 0, 4],
            [[5, 4, 3, 0, 0, 0], 0, 3],
            [[5, 4, 0, 0, 0, 0], 0, 2],
            [[5, 0, 0, 0, 0, 0], 0, 1],
            [[3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 22],
            [[3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 1, 12],
            [[3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 2, 1],
            [[3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 3, 0],
        ];
    }
}
